{"version":3,"sources":["Contents.js","Title.js","Titles.js","BookHeader.js","BookFooter.js","Book.js","Books.js","App.js","serviceWorker.js","index.js"],"names":["Contents","props","books","isLoading","className","map","book","key","name","dangerouslySetInnerHTML","__html","start","acquired","substring","href","titles","title","split","Title","link","Titles","index","BookHeader","authors","publisher","years","author","year","BookFooter","stop","Book","body","id","source","escapeHtml","Books","App","url","useState","setTitle","useEffect","document","setBooks","a","fetch","result","json","data","ReactGA","initialize","trackingId","pageview","window","location","pathname","fetchData","length","Boolean","hostname","match","dataUrl","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7bf94e4e.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Contents(props) {\n    const {books, isLoading} = props;\n\n    return(\n        <div>\n            <p>{isLoading ? \"Loading...\" : \"Contents\"}</p>\n            <div className=\"table-of-contents\">\n                {books.map(book => (\n                    <div key={book.name}><span className=\"marker\" dangerouslySetInnerHTML={{__html: (book.start ? book.start : book.acquired).substring(0, 4)}}/> <a href={'#' + book.name} dangerouslySetInnerHTML={{__html: book.titles[0].title.split(':', 1)[0] }} /></div>\n                ))}\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\n\nexport default function Title(props) {\n    const {link, title} = props;\n\n    return(\n        <div>\n            {link ? <a href={link} dangerouslySetInnerHTML={{__html: title }}/> : <span dangerouslySetInnerHTML={{__html: title }}/>}\n        </div>\n    )\n}\n","import React from 'react';\nimport Title from './Title';\n\nexport default function Titles(props) {\n    const {titles} = props;\n\n    return(\n        <h2>\n            {titles.map((title, index) => (\n                <Title key={index} link={title.link} title={title.title}/>\n            ))}\n        </h2>\n    )\n}\n","import React from 'react';\n\nexport default function BookHeader(props) {\n    const {authors, publisher, years} = props;\n\n    return(\n        <header>\n            <table className=\"book-metadata\">\n                <tbody>\n                    <tr>\n                        <td className=\"author\">\n                            {authors.map((author, index) => <div key={index} dangerouslySetInnerHTML={{__html: author }}/>)}\n                        </td>\n                        <td className=\"publisher\" dangerouslySetInnerHTML={{__html: publisher }}/>\n                        <td className=\"published-year\">\n                            {years.map((year, index) => <div key={index} dangerouslySetInnerHTML={{__html: year }}/>)}\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </header>\n    )\n}\n","import React from 'react';\n\nexport default function BookFooter(props) {\n    const {start, stop} = props;\n\n    return(\n        <footer>\n            {start &&\n                <table className=\"reading-metadata\">\n                    <tbody>\n                    <tr>\n                        <td className=\"time\">Started reading:</td>\n                        {start ? <td className=\"time\"><code>{start}</code></td> : <td className=\"no_time\">not started</td>}\n                    </tr>\n                    <tr>\n                        <td className=\"time\">Finished reading:</td>\n                        {stop ? <td className=\"time\"><code>{stop}</code></td> : <td className=\"no_time\">in progress</td>}\n                    </tr>\n                    </tbody>\n                </table>\n            }\n        </footer>\n    )\n}\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport Titles from './Titles';\nimport BookHeader from './BookHeader';\nimport BookFooter from './BookFooter';\n\nexport default function Book(props) {\n    const {name, titles, authors, publisher, years, body, start, stop} = props;\n\n    return(\n        <article id={name}>\n            <Titles titles={titles}/>\n\n            <BookHeader authors={authors} publisher={publisher} years={years}/>\n\n            <section><ReactMarkdown source={body} escapeHtml={false} /></section>\n\n            <BookFooter start={start} stop={stop}/>\n        </article>\n    )\n}\n","import React from 'react';\nimport Book from './Book';\n\nexport default function Books(props) {\n    const {books} = props;\n\n    return(\n        books.map(book => (\n            <Book\n                key={book.name}\n                name={book.name}\n                titles={book.titles}\n                authors={book.authors}\n                publisher={book.publisher}\n                years={book.years}\n                body={book.body}\n                start={book.start}\n                stop={book.stop}\n            />\n        ))\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport ReactGA from 'react-ga';\nimport './App.css';\nimport './tufte.css';\nimport Contents from './Contents';\nimport Books from './Books';\n\nfunction App(props) {\n    const {url} = props;\n\n    const [title, setTitle] = useState(\"Readings\");\n    useEffect(() => { document.title = title }, [title]);\n\n    const [books, setBooks] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await fetch(\"/google_analytics.json\");\n            const data = await result.json();\n            ReactGA.initialize(data.trackingId);\n            ReactGA.pageview(window.location.pathname);\n        };\n        fetchData();\n    }, []);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await fetch(url);\n            const data = await result.json();\n            setTitle(data.title);\n            setBooks(data.books);\n        };\n        fetchData();\n    }, [url]);\n\n    return (\n        <div className=\"App\">\n            <h1>{title}</h1>\n            <Contents books={books} isLoading={books.length === 0}/>\n            <Books books={books}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst dataUrl = document.location.pathname.split('.html', 1)[0] + \"_json.cgi\";\n\nReactDOM.render(\n    <App url={dataUrl}/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}