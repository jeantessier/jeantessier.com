[[MartinFowler.html][Martin Fowler]] was in town for a "ThoughtWorks'
Technologist Forum".  It was a free event hosted by ThoughtWorks, I just had to
attend.

I got there early, hoping to meet some familiar faces.  I worked with
ThoughtWorkers at Google and there's a Google office nearby, maybe someone
would be there too.  I met [[http://www.digitaldimsum.co.uk/][Jonny Leroy]],
a ThoughtWorker who was an agile coach with me at Google and I got to show him
ShopWell and we got to catch up a bit.  I immediately recognized him and
remembered what we had worked on together, but I drew a blank with regard to
his name.  I remembered the guy but couldn't recall the name.  I had to
surrepticiously grep through my notes from back then, which I had on my laptop,
to get at this missing piece.

Back to Martin Fowler.  The talk had three parts: continuous integration and
deployment, selected questions fielded by the audience, and domain specific
languages, his latest thing.

The first part started about continuous integration and how it helps reduce
painful integrations.  "If it hurts, do it more often," as they say.  This
part was probably aimed at laggards who still don't get continuous integration.
Fowler mentioned the book
[[Books.cgi#Continuous%5FIntegration][Continuous Integration]], part of his
Signature Series at Addison Wesley.  It is a good book if you're not
technical and want to learn about software practices, but any developer worth a
dime needs only one figure out of that book.  The talk got more interesting when
he moved past this into "continuous delivery" territory.  He talked about build
pipelines and introduced terminology to help communication about the various
stages (commit, acceptance, performance, deploy) and the degrees of automation
required by each.  There is a new book in the works,
[[http://www.amazon.com/Continuous-Delivery-Reliable-Deployment-Automation/dp/0321601912/ref%3Dsr%5F1%5F1?ie%3DUTF8&s%3Dbooks&qid%3D1273816853&sr%3D1-1][Continuous Delivery]],
due out later this year.

For the second part of the evening, Fowler answered some questions that had been
submitted by attendees when they registered for the talk.  I was happy that he
had picked my question, whether it is better to hire people already familiar
with your platform or to hire talented individuals who will learn it as they
go.  I stole it from one of the presentations at
[[http://sllconf.com][Startup Lessons Learned]].  His take on it is to hire
candidates with solid design skills, they will thrive in any environment.  It
helps to have one platform expert on hard to answer questions.  Jonny also
told me about ThoughtWorks' system of T's: broad skill sets with one or two deep
areas of knowledge.  Just make sure the T's on your team don't all line up
exactly, so you have appropriate coverage.  Other questions dealt with how to
write stories (strict templates are for process weennies), planning defect fixes
(beware of _broken windows_), and active objects (use lazy loading at first and
optimize only as needed).

The last part was about domain specific languages (DSLs).  Fowler has been
blogging and tweeting about this for the past couple years, so it was expected.
He has a book coming out on the topic,
[[http://www.amazon.com/Domain-Specific-Languages-Addison-Wesley-Signature/dp/0321712943/ref%3Dsr%5F1%5F1?ie%3DUTF8&s%3Dbooks&qid%3D1273819071&sr%3D1-1][Domain Specific Languages]].
He talked about the _Unix tradition_ of creating a new language and writing a
parser for it, using =yacc= or =YAML=, what he calls _external DSLs_.  He
compared to the Lisp tradition of writing languages as flavors of Lisp and
running them using the Lisp environment, a tradition that has been picked up by
the Ruby community.  He calls these _internal DSLs_ or _embedded DSLs_ since
they live inside a host language.

The evening concluded with some mild Q&amp;A.

After the talk, I got Martin to sign my copy of
[[Books.cgi#Planning%5FExtreme%5FProgramming][Planning Extreme Programming]], which
was already signed by co-author Kent Beck.  Afterwards, he came to say hi to
Jonny, at which point Jonny introduced me to Martin Fowler.  I've been
introduced now, I'm no longer just a nerd in line after a talk.  :-)

Unrelated to this, but today I came upon a
[[http://www.infoq.com/presentations/Sustainable-Test-Driven-Development][great talk by Steve Freeman]]
(of [[http://jmock.org/][jMock]] fame).  It is about writing good tests that are
easy to maintain, as opposed to record-replay types that are very brittle.  It
covers material in his new book:
[[http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref%3Dwl%5Fit%5Fdp%5Fo?ie%3DUTF8&coliid%3DI15OEPW6BACNQG&colid%3D9C8YXIMI8EO3][Growing Object-Oriented Software, Guided by Tests]].
