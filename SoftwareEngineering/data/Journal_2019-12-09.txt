The tools for developing [[https://graphql.org/][GraphQL]] APIs are not quite
there, yet.  I'm working with a GraphQL server and it is quite difficult to
send it simple requests to try things out.  With REST services, we'd used =curl=
initially, until [[https://httpie.org/][Httpie]] and
[[https://www.postman.com/][Postman]] came along and made it much easier to call
REST endpoints.

But now, with GraphQL, things are complicated again.  Between CSRF and
authentication, most servers will deny any queries that doesn't have its
credentials just right.  REST tools have shortcuts for formatting parameters
into JSON payloads.  They are of little help when it comes to GraphQL.

Some GraphQL platforms expose their own tool, like
[[https://www.electronjs.org/apps/graphiql][GraphiQL]] and
[[https://github.com/prisma-labs/graphql-playground][Playground]].  They run in
the browser and are served side-by-side with the application itself.  This way,
they can take advantage of the app's authentication mechanisms.  They are useful
when debugging an application under development, but much less so when we're
trying to figure out the API of a third-party.  If they don't provide you with a
built-in API tool, like GraphiQL or Playground or an equivalent, you're out of
luck.  The =[[https://rubygems.org/gems/graphql][graphql]]= gem in Rails bundles
GraphiQL with it.  The
=[[https://www.npmjs.com/package/apollo-server][apollo-server]]= package in Node
bundles Playground.  This
[[https://blog.apollographql.com/4-simple-ways-to-call-a-graphql-api-a6807bcdb355][article on calling GraphQL endpoints]]
compares GraphiQL to =curl= to straight JavaScript code.
