Looking at [[https://github.com/ReactiveX/RxJava][RxJava]] and
_reactive computing_.  It is a very elegant model, especially when coupled with
Java 8's lambda expressions.  Here is
[[http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/][a nice tutorial]].

There is also a Groovy binding,
[[https://github.com/ReactiveX/RxGroovy][RxGroovy]], but the documentation is
still sparse.

At work, I developed a somewhat-reactive framework inside Grails using Spring
Events.  Any piece of code can publish a _notification_.  Services can register
themselves as _notification listeners_ and define handlers with a _match_
closure and a _handle_ closure.  Handlers which return =true= from their _match_
closure get their _handle_ closure called.

    handlers.findAll { name, handler ->
        handler.match notification
    }.each { name, handler ->
        handler.handle notification
    }

The handlers are named in a =Map= to help with debugging.

We even added an _origin_ for the notifications and made it an optional
parameter to the closures.

    handlers.findAll { name, handler ->
        if (handler.match.maximumNumberOfParameters == 1) {
            handler.match notification
        } else {
            handler.match notification, origin
        }
    }.each { name, handler ->
        if (handler.handle.maximumNumberOfParameters == 1) {
            handler.handle notification
        } else {
            handler.handle notification, origin
        }
    }

The nice thing here is that publishers and consumers are completely decoupled.
The RxJava examples I have seen so far are all wired together explicitly.  The
elements in my framework are only connected through the Spring Event system.
And the services are called on separate threads, so they get to handle
notifications in parallel (constrained by a thread pool, of course).
