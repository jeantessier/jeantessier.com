A friend of mine is participating in
[[http://www.24hourcomicsday.com/][24 Hour Comics Day]], trying to write a
24-page comic book in 24 hours.  Comic writer
[[http://en.wikipedia.org/wiki/Erik_Larsen][Erik Larsen]] gave the participants
the following piece of advice:

<blockquote>
<i>Don't try to make it <u>beautiful</u>--try to make it <u>finished</u>.</i>
</blockquote>

<blockquote>
<i><u>Don't</u> do unnecessary drawing--<u>don't</u> do thumbnails--<u>don't</u>
do character design--do minimal pencils and plow through it.</i>
</blockquote>

<blockquote>
<i>Your primary goal is to <u>get done</u>.  Make it bare bones--do rough
outlines--and plan to render and sweeten it AFTER you have 24-pages finished in
some form.  If you run out of time because you decided to make every page
awesome--you've failed.  It's okay to do shitty work.  People expect them to be
shitty--they always look pretty sloppy--the bigger shame is failing to finish.
So plan on doing 24-rough, barebones pages.  Anything more is gravy.  I suggest
that you work on it all as one piece--don't tackle it page by page or it'll
deteriorate as you go--don't stop for anything--if a panel is giving you
grief--move on and come back to it--keep your hands moving at all times.</i>
</blockquote>

<blockquote>
<i>Use tools that allow you to work fast. You may think using a proper dip pen
and brush would be fine but you'll lose a lot of time dipping--you're better off
using markers (I used a Pentel Rolling Writer and a Sharpie to fill in
blacks--the originals are pretty ugly 15-years later but what the hell).</i>
</blockquote>

Now, this advice is for a very specific task: writing a 24-page comic in 24
hours.  I suspect that it might be slightly different when working on a
masterpiece.  But the general idea of going for breadth before depth is still a
good idea to keep you on track and make sure you produce _some_ value before you
try to maximize that value.

This is eerily similar to a piece of advice in software development regarding
premature optimization:

<blockquote>
<i>Make it run.  Make it right.  Make it fast.</i>
</blockquote>

That is, get something running first, however ugly it might be.  Once you have
that first step, you can go back over it to clean it up and design it a little
better.  Only then should you consider optimizations to make it run faster,
with performance metrics to justify the need to optimization and to tell you
when you've done enough.  I even found a fourth part on the web:
_Make it small._

Test-Driven Development applies the same principle: write a test that breaks,
then writes the simplest code to make the test pass.  That's _making it run_.
After that, you have to immediately refactor the code mercilessly.  Make the
intent clear, remove duplication, all the various ways you can _make it right_.
All the tests written so far make up a safety harness that allows you to
refactor without breaking anything.  If you want to optimize the code
afterwards, you need metrics to drive it and the tests again guard you against
breaking something.

The first part, _making it run_, is similar Larsen's advice.  At that stage, do
not focus on esthetic concerns.  It is fast and furious.  And while you can get
a lot done this way, it is short-lived.  Larsen's comics
_are pretty ugly 15 years later_.  Code that's quickly hacked together is hard
to maintain and increasingly difficult to extend.

The second part, _making it right_, is there to ensure longevity of the work.
This is where you clean it up so it will last a long time.  This is where you
make the code easy to maintain and extend.  This is where attention to detail is
really important, where craftsmanship really shows.  It is also the part that is
hardest to convey to the uninitiated.  Especially in software, the code where
Engineering spends all of its time is hidden from the Product Development
stakeholders.  If you only show them outputs from _making it run_, they might
not understand why you cannot do everything at that speed.  But that code rots
pretty fast.  Time and time again I've seen projects grind to a halt under the
weight of their technical debt.  _Making it run_ is incurring the debt but
_making it right_ is managing it.  You don't have to pay the entire balance
everytime, but you cannot ignore it for too long either.  If you want the
product owners to stay happy for the long run, don't skimp on _making it right_.
