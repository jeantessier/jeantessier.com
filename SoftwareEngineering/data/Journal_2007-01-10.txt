I attended a BayXP meeting with guest speaker Alistair Cockburn.  It was hosted
at Google.  He covered many of the ideas in his latest book:
[[http://amzn.com/0321482751][Agile Software Development, 2nd Edition]].
His latest interests have taken him in an interesting direction: maybe the
expression _software engineering_ isn't so bad after all, as long as you adjust
your definition of _engineering_.

He proposes that engineering has always been a collaborative game of invention
and communication.  It is only in the second half of the 20th Century that some
started to think of it in terms of hard, empirical science.  If you look at how
engineers work from day to day, it looks very much like what we do with
software: discuss, model, compare idea, make prototypes, iterate, etc.

Cockburn is working on a framework to help define software engineering.  His
framework is based on three _legs_:

    1 craft
    1 cooperative game of invention and communication
    1 theory of constraints

The crafts are skills that all practitioners must learn and refine continuously.
His list of crafts for software engineering includes:

    * Deciding what to build (what some might call _requirements_)
    * Managing
    * Modeling
    * Designing the external view (what some might call _UI_)
    * Architecting (large-scale design)
    * Programming (small-scale design)
    * Validating decisions (what some might call _testing_)

He eschews words like _requirements_, _UI_, and _testing_ because they carry too
much baggage and it keeps people from looking beyond their preconceptions.

The game aspects means it's a team effort and there are many factors that come
into consideration for every decision.

Finally, we can learn from _lean manufacturing_ by replacing units of production
by decisions and then optimizing the flow of decisions throughout the process.

Cockburn also brought up the latest acronym: =XXD= or "Dos Equis"-Driven
development.  Just like TDD is not about testing, XXD is not about beer.  Really,
the tests are eXecutable eXamples, hence the name.  Funny.

Cockburn closed with some quotes from a NATO conference that was held in 1968
and was where they coined the tern "software engineering".  He found it
interesting that they recommended heavyweight procedures, but in practice they
were doing things in a very agile way.

    * While they aim for a process people are interchangeable, they would rather work with teams of close friends and wouldn't consider a contract without knowing the people on the team.
    * People who spend 90% of the project time to produce paper confuse the menu with the meal.
    * Write flow charts until you think you understand the problem.  Write code until you realize that you do not.  Repeat.

It's easy to take quotes out of context and spin them however you like.  I would
have liked a little more context about the NATO conference, who the participants
were, who held what position, etc.  I guess I'll have to find and read the
transcript.
