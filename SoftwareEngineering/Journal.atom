<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">

    <title>Jean's Journal</title>
    <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi</id>
    <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi"/>
    <author>
        <name>Jean Tessier</name>
    </author>
    <rights type="xhtml">Copyright (c) 2001-2009, Jean Tessier</rights>

    <entry>
        <title>January 10, 2009</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2009-01-10</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2009-01-10"/>
        <published>2009-01-10</published>
        <content type="xhtml">
<p>
Added an Atom feed for this Journal.  It forced me to correct many errors in
past entries, from well-formedness to proper escaping of control characters.
</p>
        </content>
    </entry>

    <entry>
        <title>January 05, 2009</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2009-01-05</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2009-01-05"/>
        <published>2009-01-05</published>
        <content type="xhtml">
<p>
Trying <a target="_blank" href="http://twitter.com/">Twitter</a>.  Here is
<a target="_blank" href="http://twitter.com/jeantessier">my feed</a>.
</p>
        </content>
    </entry>

    <entry>
        <title>November 07, 2008</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2008-11-07</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2008-11-07"/>
        <published>2008-11-07</published>
        <content type="xhtml">
<p>
Played with <a target="_blank" href="http://rspec.info/">RSpec</a> today and wrote my first unit tests
in Ruby.  I even played with
<a target="_blank" href="http://rspec.info/documentation/mocks/">Spec::Mocks</a> to do some mocking
while I was at it.
</p>
        </content>
    </entry>

    <entry>
        <title>October 31, 2008</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2008-10-31</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2008-10-31"/>
        <published>2008-10-31</published>
        <content type="xhtml">
<p>
Started learning about JavaScript today.
</p>
        </content>
    </entry>

    <entry>
        <title>May 29, 2008</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2008-05-29</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2008-05-29"/>
        <published>2008-05-29</published>
        <content type="xhtml">
<p>
I wrote a <a target="_blank" href="http://jeantessier.com/SoftwareEngineering/Mocking.html">more complete comparison</a> of
<a target="_blank" href="http://jmock.org">jMock</a>
and <a target="_blank" href="http://easymock.org">EasyMock</a>.  Someone also suggested I should include
<a target="_blank" href="http://code.google.com/p/mockito">Mockito</a>.
</p>
        </content>
    </entry>

    <entry>
        <title>May 25, 2008</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2008-05-25</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2008-05-25"/>
        <published>2008-05-25</published>
        <content type="xhtml">
<p>
I looked for some corresponding features between <a target="_blank" href="http://jmock.org">jMock</a>
and <a target="_blank" href="http://easymock.org">EasyMock</a>.
</p>

<table cellpadding="10">
    <tr>
        <th>
            Feature
        </th>
        <th>
            jMock
        </th>
        <th>
            EasyMock
        </th>
    </tr>
    <tr>
        <td>
            Default return value
        </td>
        <td>
            <code>one (myMock).getFoo()</code>
        </td>
        <td>
            <em>n/a</em>
        </td>
    </tr>
    <tr>
        <td>
            Ignoring a method
        </td>
        <td>
            <code>ignoring (myMock).someMethod()</code>
        </td>
        <td>
            <code>expect(myMock.someMethod()).asStub()</code>
        </td>
    </tr>
    <tr>
        <td>
            Intercept mocked method
        </td>
        <td>
            <code>Action</code> and <code>CustomAction</code>
        </td>
        <td>
            <code>IAnswer&lt;T&gt;</code>
        </td>
    </tr>
    <tr>
        <td>
            Access arguments to mocked method
        </td>
        <td>
            <code>invocation.parameterValues</code>
        </td>
        <td>
            <code>EasyMock.getCurrentArguments()</code>
        </td>
    </tr>
</table>

<p>
It looks like everything I can do with jMock, I can do with EasyMock too.
All, that is, except returning innocuous values automatically.  I'll need to
look into the <code>andStub...()</code> methods further.
</p>
        </content>
    </entry>

    <entry>
        <title>May 22, 2008</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2008-05-22</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2008-05-22"/>
        <published>2008-05-22</published>
        <content type="xhtml">
<p>
Got into an argument of <a target="_blank" href="http://jmock.org">jMock</a> versus
<a target="_blank" href="http://easymock.org">EasyMock</a>.  I like jMock better.  I find its syntax
more expressive and it lets me do more things with less typing.  I really like
how it can return "innocuous values" by default.  0 for numbers, "" for
Strings, ignored mocks for any class, etc.  If I don't care about a given
return value, I can let jMock handle it and not worry about it.  It's really
nice.  I often hear from people who don't like jMock that they looked at it a
long time ago and didn't like what they were seeing.  Early versions of jMock
had severe limitations, but jMock 2 is much, much better.
</p>

<p>
I wrote a Ruby script to parse some <i>grep</i> output to help me ascertain which is
most popular at work.  I essentially did this:
</p>

<pre>
    $ find . -name "*.java" -print | xargs grep -R -l org.easymock | wc -l
    <i>X</i>
    $ find . -name "*.java" -print | xargs grep -R -l org.jmock | wc -l
    <i>Y</i>
</pre>

<p>
And got that <i>X</i> was much larger than <i>Y</i>.  Bummer.  Then, I started thinking.
If I have one project using EasyMock with 1000 files and one project using
jMock with only 50 files, my grep output would make it look like EasyMock is
used 20:1 compared to jMock, whereas in fact, it's more like 1:1; one project
on one side, one project on the other side.  So I wrote a quick Ruby script to
capture the projects instead of just files.  By project, I mean the third word
in package names like <code>com.&lt;company&gt;.&lt;project&gt;</code>.  I wrote my script
as:
</p>

<pre>
    $!/usr/bin/env ruby -w
    &amp;nbsp;
    projects = Hash.new(0)
    &amp;nbsp;
    ARGF.each do |line|
        if (line =~ /src\/com\/\w+\/(\w+)\//)
            projects[$1] += 1
        end
    end
    &amp;nbsp;
    projects.sort.each {|pair| puts "#{pair[0]} -&gt; #{pair[1]}"}
</pre>

<p>
I paired with Dave Astels to tap into his immense knowledge of Ruby.  His style
is more in tune with functional programming than mine, but we ended up with
something that was both liked.  I learned a bit about <code>puts</code>, he learned about
<code>ARGF</code>.
</p>

<p>
This script lets me see what the "projects" are and how many files are in each.
</p>

<pre>
    $ find . -name "*.java" -print | xargs grep -R -l org.easymock | collect_projects.rb | wc -l
    <i>X'</i>
    $ find . -name "*.java" -print | xargs grep -R -l org.jmock | collect_projects.rb | wc -l
    <i>Y'</i>
</pre>

<p>
This time, the ratio of <i>X'</i> to <i>Y'</i> is 4:1.  A little better.  At work, we
still use EasyMock predominantly, but I can still make a case for using jMock.
:-)
</p>

<p>
Which is what I did in the afternoon, as I was pairing with someone.  I got
them to start using jMock to test some specific piece of behavior.  As we went
along, we came upon a nasty situation: the class under test creates a structure
and then passes it to a collaborator that knows how to populate it.  The
behavior we wanted to exercise then depends on the structure having been
properly populated.  But we are mocking the collaborator!  I can write an
expectation that the <code>populate()</code> method got called, but how can I have the
mock modify the structure that was passed in as one of the parameters?  This is
how I learned about jMock's <code>CustomAction</code> and how to stub side-effects in my
expectations.  It looks ugly, but it allowed us to write a test quickly instead
of having to embarking on a lengthy refactoring right on the spot.  It was
kinda nice.  I learned something today!
</p>
        </content>
    </entry>

    <entry>
        <title>May 21, 2008</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2008-05-21</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2008-05-21"/>
        <published>2008-05-21</published>
        <content type="xhtml">
<p>
I wrote my first <a target="_blank" href="http://pyunit.sourceforge.net/">PyUnit</a> tests today.  I'm
not in love with the Python syntax for running the tests or for importing
classes.  Or maybe there's just something I'm not getting.
</p>
        </content>
    </entry>

    <entry>
        <title>March 19, 2008</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2008-03-19</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2008-03-19"/>
        <published>2008-03-19</published>
        <content type="xhtml">
<p>
For my new language for 2008, I decided to learn Ruby.  I finished reading the
first two parts of the
<a target="_blank" href="http://www.amazon.com/Programming-Ruby-Pragmatic-Programmers-Second/dp/0974514055/ref=pd_bbs_2?ie=UTF8&amp;s=books&amp;qid=1205992436&amp;sr=8-2">Pick Axe</a>.
Last year, I learned Python and I stopped using Perl in order to force myself
to focus on Python.  One thing I really missed from Perl are the command-line
switches <code>-p</code>, <code>-n</code>, and <code>-i</code>; I could use them for quick one-off operations on
files.  In Python, I have to write a script for the simplest task.  I'm glad to
report that Ruby also has <code>-p</code>, <code>-n</code>, and <code>-i</code> switches that behave exactly as
in Perl.
</p>
        </content>
    </entry>

    <entry>
        <title>September 21, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-21</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-21"/>
        <published>2007-09-21</published>
        <content type="xhtml">
<p>
It's alive!
</p>

<p>
My Alienware computer is alive again!
</p>

<p>
I put in the new drive, but the computer wouldn't start.  I needed to use the
floppy drive in a pinch, so I decided to re-install Windows again so at least
I could copy a file from my USB thumbdrive to a floppy.  So I put the old
hard-drive in and ran the Windows recovery CD.  Somehow, that fixed the boot
sequence and next thing I know the computer is booting from the image on the
hard-disk.  All the drivers are setup correctly.  Oh joy!  Now, I bought a
250GB hard-drive for nothing.  Ah well, maybe I can find a way to make it work
as a secondary drive or something.
</p>

<p>
All I have left to do is reinstall everything: games, apps, patches, data...
</p>
        </content>
    </entry>

    <entry>
        <title>September 20, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-20</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-20"/>
        <published>2007-09-20</published>
        <content type="xhtml">
<p>
The new hard-drive has arrived.  I ordered a <code>WD2500JD</code> and they sent me a
<code>WD2500JS</code>.  Everything seems the same except it uses SATA II instead of plain
old SATA.  Searching the web indicates that they should be compatible.
</p>
        </content>
    </entry>

    <entry>
        <title>September 17, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-17</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-17"/>
        <published>2007-09-17</published>
        <content type="xhtml">
<p>
Ordered a replacement drive.  I'm going for exact duplication of the hardware,
so I need a <code>WD2500JD</code>.  After 2.5 years, they are getting hard to find.
</p>
        </content>
    </entry>

    <entry>
        <title>September 15, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-15</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-15"/>
        <published>2007-09-15</published>
        <content type="xhtml">
<p>
Copied all remaining data to the external drive.  Ran Alienware Respawn to
ghost the machine, but it failed.  When I reboot, I get a blue screen to flash
for one moment and then it tries to reboot again.  I guess the crash actually
damaged the drive and some sectors are now bad.  The Respawn tried to restore
these sectors to what they had been but failed.  It looks like I will have to
reinstall Windows again and figure out all the drivers.  One good thing: just
before running Respawn, I got the sound card to work again.
</p>
        </content>
    </entry>

    <entry>
        <title>September 14, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-14</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-14"/>
        <published>2007-09-14</published>
        <content type="xhtml">
<p>
Bought an external 500GB drive with USB 2.0 and FireWire.  That should last me
a while.
</p>
        </content>
    </entry>

    <entry>
        <title>September 12, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-12</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-12"/>
        <published>2007-09-12</published>
        <content type="xhtml">
<p>
Borrowed a FireWire cable so I can copy data out of my Alienware onto my
MacBook Pro.  I needed MacDrive so Windows could write to the MacOS-formatted
drive.  It works pretty well, but it was slow work copying everything.  And I
ran out of space on my MacBook Pro; I only got to copy 75GB and I still have
another 50GB to go.
</p>
        </content>
    </entry>

    <entry>
        <title>September 11, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-11</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-11"/>
        <published>2007-09-11</published>
        <content type="xhtml">
<p>
I have an Alienware Respawn CD to set it all back the way it was when they
shipped it to me.  This will erase the harddrive, though.  I need to copy all
my important files out of there first.  But it should solve all my driver
issues.
</p>
        </content>
    </entry>

    <entry>
        <title>September 10, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-10</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-10"/>
        <published>2007-09-10</published>
        <content type="xhtml">
<p>
Got a technician to come and install my new motherboard.  When we booted up the
machine, it flashed a blue screen and tried to reboot again.  The technician
thinks the crash corrupted the OS files and I will have to reinstall Windows.
When I did, all the driver configuration was wrong.  I can't get to 1600x1200
with 32-bit graphics, I can't get sound, and I can't get on the network.  I
have a CD with drivers, but it has drivers for all Alienware hardware and I
can't figure out which ones are the ones I need.
</p>
        </content>
    </entry>

    <entry>
        <title>September 04, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-04</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-09-04"/>
        <published>2007-09-04</published>
        <content type="xhtml">
<p>
New motherboard arrived.
</p>
        </content>
    </entry>

    <entry>
        <title>August 29, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-08-29</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-08-29"/>
        <published>2007-08-29</published>
        <content type="xhtml">
<p>
New motherboard shipped.
</p>
        </content>
    </entry>

    <entry>
        <title>August 27, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-08-27</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-08-27"/>
        <published>2007-08-27</published>
        <content type="xhtml">
<p>
I won the auction for my new motherboard.
</p>
        </content>
    </entry>

    <entry>
        <title>August 25, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-08-25</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-08-25"/>
        <published>2007-08-25</published>
        <content type="xhtml">
<p>
My Alienware machine is dead.  It won't start.  I can't even get a hardware
splash screen to show.  I talked with a technician who said my motherboard is
probably dead.
</p>

<p>
I bid on a new motherboard on eBay.  It comes with a slightly better processor
and 4GB of RAM.  That would be a nice upgrade.
</p>
        </content>
    </entry>

    <entry>
        <title>January 25, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-01-25</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-01-25"/>
        <published>2007-01-25</published>
        <content type="xhtml">
<p>
I just realized that I've been working with Alex Martelli, author of some of the
most popular books on Python, for the past six months and I didn't even
realize it.  He wrote or co-wrote:
</p>

<ul>
<li><a target="_blank" href="http://www.amazon.com/gp/product/0596100469/ref=wl_it_dp/103-5245472-8565461?ie=UTF8&amp;coliid=I6NZIJ81HZ56Z&amp;colid=9C8YXIMI8EO3">Python in a Nutshell, 2nd Edition</a></li>
<li><a target="_blank" href="http://www.amazon.com/gp/product/0596007973/ref=wl_itt_dp/103-5245472-8565461?ie=UTF8&amp;coliid=I4MQQJG8HMEYL&amp;colid=9C8YXIMI8EO3">Python Cookbook</a></li>
</ul>

<p>
What a small world.
</p>
        </content>
    </entry>

    <entry>
        <title>January 11, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-01-11</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-01-11"/>
        <published>2007-01-11</published>
        <content type="xhtml">
<p>
I volunteered to read
<a target="_blank" href="http://www.amazon.com/Agile-Software-Development-Cooperative-Game/dp/0321482751/sr=8-2/qid=1169932533/ref=pd_bbs_sr_2/002-8459785-4397603?ie=UTF8&amp;s=books">Agile Software Development, 2nd Edition</a>.
I have only one week to read it and do a report.  I had to stop by a booktore
on my way home to buy a copy.  I had read the first edition and done a
presentation back when I was at Vignette, I should be able to reuse a lot of
that material.
</p>
        </content>
    </entry>

    <entry>
        <title>January 10, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-01-10</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-01-10"/>
        <published>2007-01-10</published>
        <content type="xhtml">
<p>
I attended a BayXP meeting with guest speaker Alistair Cockburn.  It was hosted
at Google.  He covered many of the ideas in his latest book:
<a target="_blank" href="http://www.amazon.com/Agile-Software-Development-Cooperative-Game/dp/0321482751/sr=8-2/qid=1169932533/ref=pd_bbs_sr_2/002-8459785-4397603?ie=UTF8&amp;s=books">Agile Software Development, 2nd Edition</a>.
His latest interests have taken him in an interesting direction: maybe the
expression <i>software engineering</i> isn't so bad after all, as long as you adjust
your definition of <i>engineering</i>.
</p>

<p>
He proposes that engineering has always been a collaborative game of invention
and communication.  It is only in the second half of the 20th Century that some
started to think of it in terms of hard, empirical science.  If you look at how
engineers work from day to day, it looks very much like what we do with
software: discuss, model, compare idea, make prototypes, iterate, etc.
</p>

<p>
Cockburn is working on a framework to help define software engineering.  His
framework is based on three <i>legs</i>:
</p>

<ol>
<li>craft</li>
<li>cooperative game of invention and communication</li>
<li>theory of constraints</li>
</ol>

<p>
The crafts are skills that all practicioners must learn and refine continuously.
His list of crafts for software engineering includes:
</p>

<ul>
<li>Deciding what to build (what some might call <i>requirements</i>)</li>
<li>Managing</li>
<li>Modeling</li>
<li>Designing the external view (what some might call <i>UI</i>)</li>
<li>Architecting (large-scale design)</li>
<li>Programming (small-scale design)</li>
<li>Validating decisions (what some might call <i>testing</i>)</li>
</ul>

<p>
He eschews words like <i>requirements</i>, <i>UI</i>, and <i>testing</i> because they carry too
much baggage and it keeps people from looking beyond their preconceptions.
</p>

<p>
The game aspects means it's a team effort and there are many factors that come
into consideration for every decision.
</p>

<p>
Finally, we can learn from <i>lean manufacturing</i> by replacing units of production
by decisions and they optimizing the flow of decisions throughout the process.
</p>

<p>
Cockburn also brought up the latest acronym: <code>XXD</code> or "Dos Equis"-Driven
development.  Just like TDD is not about testin, XXD is not about beer.  Really,
the tests are eXecutable eXamples, hence the name.  Funny.
</p>

<p>
Cockburn closed with some quotes from a NATO conference that was held in 1968
and was where they coined the tern "software engineering".  He found it
interesting that they recommended heavyweight procedures, but in practice they
were doing things in a very agile way.
</p>

<ul>
<li>While they aim for a process people are interchangeable, they would rather work with teams of close friends and wouldn't consider a contract without knowing the people on the team.</li>
<li>People who spend 90% of the project time to produce paper confuse the menu with the meal.</li>
<li>Write flow charts until you think you understand the problem.  Write code until you realize that you do not.  Repeat.</li>
</ul>

<p>
It's easy to take quotes out of context and spin them however you like.  I would
have liked a little more context about the NATO conference, who the participants
were, who held what position, etc.  I guess I'll have to find and read the
transcript.
</p>
        </content>
    </entry>

    <entry>
        <title>January 06, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-01-06</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-01-06"/>
        <published>2007-01-06</published>
        <content type="xhtml">
<p>
Met Guido Van Rossum's wife and son at the park.  They are nice people.  I was
out playing with my kids when this lady saw my Google jacket.  She was wearing
the same.  She mentioned that her husband worked at Google, "doing things with
Python."  When I mentioned that I was just learning Python myself, she said:
"My husband wrote Python."  I said: "Guido?"  She answered yes and we had a
good laugh.
</p>
        </content>
    </entry>

    <entry>
        <title>January 04, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-01-04</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-01-04"/>
        <published>2007-01-04</published>
        <content type="xhtml">
<p>
Python won't let me write "<code>i++</code>".  So far, the only explanation I could find
was that Guido didn't like the <code>++</code>/<code>--</code> operators.  Lame.  For a moment, I
thought I'd be stuck writing super-long "<code>i = i + 1</code>" until a friend pointed
out "<code>i += 1</code>" worked too.  I guess this will have to do.
</p>

<p>
There is an FTP module in Python, but it looks pretty useless.  It is little
more than writing explicit commands to a socket and parsing the response
yourself.  I was hoping for a <i>list</i> or <i>dir</i> operation that would return a
directory structure, but I guess I will have to keep on searching.
</p>
        </content>
    </entry>

    <entry>
        <title>January 03, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-01-03</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-01-03"/>
        <published>2007-01-03</published>
        <content type="xhtml">
<p>
Got Python for my PCs from <a target="_blank" href="http://python.org/">python.org</a>.
</p>

<p>
I found some good candidates for books on Python:
</p>

<ul>
<li><a target="_blank" href="http://www.amazon.com/gp/product/0596100469/ref=wl_it_dp/103-5245472-8565461?ie=UTF8&amp;coliid=I6NZIJ81HZ56Z&amp;colid=9C8YXIMI8EO3">Python in a Nutshell, 2nd Edition</a></li>
<li><a target="_blank" href="http://www.amazon.com/gp/product/0596002815/ref=wl_itt_dp/103-5245472-8565461?ie=UTF8&amp;coliid=I2L7PBKN6P2ZGH&amp;colid=9C8YXIMI8EO3">Learning Python</a></li>
<li><a target="_blank" href="http://www.amazon.com/gp/product/0596009259/ref=wl_itt_dp/103-5245472-8565461?ie=UTF8&amp;coliid=I1D4IMGIOIJS42&amp;colid=9C8YXIMI8EO3">Programming Python</a></li>
<li><a target="_blank" href="http://www.amazon.com/gp/product/0596007973/ref=wl_itt_dp/103-5245472-8565461?ie=UTF8&amp;coliid=I4MQQJG8HMEYL&amp;colid=9C8YXIMI8EO3">Python Cookbook</a></li>
<li><a target="_blank" href="http://www.amazon.com/gp/product/0672328623/ref=wl_itt_dp/103-5245472-8565461?ie=UTF8&amp;coliid=I14HK5SUXCIYSO&amp;colid=9C8YXIMI8EO3">Python Essential Reference, 3rd Edition</a></li>
</ul>

<p>
Obviously, they modelled "Learning Python" and "Programming Python" on the very
popular titles for Perl.  But wheras "Programming Python" is much more popular
than "Learning Perl", it appears to be the reverse with Python and "Learning
Python" gets more stars on Amazon than "Programming Python".  Curious.
</p>

<p>
There is also a pretty cool
<a target="_blank" href="http://docs.python.org/tut/tut.html">online tutorial</a>.
</p>
        </content>
    </entry>

    <entry>
        <title>January 02, 2007</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-01-02</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2007-01-02"/>
        <published>2007-01-02</published>
        <content type="xhtml">
<p>
New Year resolution: learn Python.  We use a lot of Python at work to write
scripts and small applications.  Learning it will make me more efficient.  If I
write my own scripts in Python, someone else is more likely to be able to
maintain them than if they were written in Perl.
</p>

<p>
So I am quitting Perl cold-turkey.  From now on, I will use only Python for
scripting (besides Bash scripts).  Quitting Perl will force me to go through
the effort of finding what I need from Python rather than falling back on Perl
out of expediency.  So far, I have not found an equivalent to <code>perl -p/-n</code> to
quickly process a file.  :-(
</p>

<p>
I borrowed some books from a colleague until I can get my own (his are a little
out of date):
</p>

<ul>
<li><a target="_blank" href="http://www.amazon.com/Python-Nutshell-Alex-Martelli/dp/0596001886/ref=ed_oe_p/103-5245472-8565461">Python in a Nutshell</a></li>
<li><a target="_blank" href="http://www.amazon.com/Python-Essential-Reference-David-Beazley/dp/0735710910/sr=8-2/qid=1162356885/ref=pd_bbs_2/103-6041063-6658211?ie=UTF8&amp;s=books">Python Essential Reference</a></li>
</ul>
        </content>
    </entry>

    <entry>
        <title>November 08, 2006</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2006-11-08</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2006-11-08"/>
        <published>2006-11-08</published>
        <content type="xhtml">
<p>
Latest chapter in my quest for a job title: <i>Software Designer</i>.  I was
looking at a job description from Qu&amp;eacute;bec, where you cannot call yourself
an engineer unless you are a member of their professional organization.  Since
I got my degree in Computer Science and not in Engineering, I could not call
myself a software engineer, but a software designer would work just fine.
</p>
        </content>
    </entry>

    <entry>
        <title>September 19, 2006</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2006-09-19</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2006-09-19"/>
        <published>2006-09-19</published>
        <content type="xhtml">
<p>
Played with Selenium.
</p>

<p>
Looked at <a target="_blank" href="http://testng.org">TestNG</a>.  Noticed how they use annotations to
earmark the tests and fixture methods.
</p>

<p>
Took another at <a target="_blank" href="http://junit.org">Junit 4.1</a>.  Played with it a bit in order
to try using annotations.  It was not so easy since they actually removed many
of the familiar trappings of JUnit 3.  Gone is the Swing <code>TestRunner</code>.  All
that is left is the text runner and now it is called
<code>org.junit.runner.JUnitCore</code>.  Go figure.
</p>

<p>
I remember being fairly disappointed that JUnit had gone the route of
annotations.  It makes life harder for tool makers.  :-)
</p>
        </content>
    </entry>

    <entry>
        <title>September 07, 2006</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2006-09-07</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2006-09-07"/>
        <published>2006-09-07</published>
        <content type="xhtml">
<p>
I used to keep my blog in a static HTML file and write it all by hand, markup
and all.  That was tedious.
</p>

<p>
Today, I wrote a CGI script in Perl to break it up into individual text files,
one per day, and use my pseudo-wiki processor from Dependency Finder to
generate the page dynamicaly.  This way, when I want to add an entry, I simply
add a text file with a much easier notation than fullblown HTML.
</p>
        </content>
    </entry>

    <entry>
        <title>September 05, 2006</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2006-09-05</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2006-09-05"/>
        <published>2006-09-05</published>
        <content type="xhtml">
<p>
I assisted at a presentation by Ken Schwaber on Scrum and got a free copy of
his book: Agile Project Management with Scrum.  He is a very good speaker.  He
sounded very honest and he shared his experience freely.  Later in the day, he
had a more intimate session with the agile user group.  The organizer had asked
for questions ahead of time but Ken completely highjacked the meeting and took
it where he wanted to take it.  It was very intereting.  He basically forced us
to question why we care about agile processes and what our goals are and what
are we doing to make track against them.
</p>
        </content>
    </entry>

    <entry>
        <title>August 18, 2006</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2006-08-18</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2006-08-18"/>
        <published>2006-08-18</published>
        <content type="xhtml">
<p>
Finally launched Reporting for Google Base.  On the UI, it's just three
columns of numbers, but there was quite a bit of backend work to do.  I got my
name in the official Google Base blog!
</p>
        </content>
    </entry>

    <entry>
        <title>March 13, 2006</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2006-03-13</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2006-03-13"/>
        <published>2006-03-13</published>
        <content type="xhtml">
<p>
I assisted at a presentation by Mike Cohn and got a free copy of his book:
Agile Estimating and Planning.  He has another book out on user stories that is
well liked on Amazon.  I'm thinking of getting it, but I might read this one
first.
</p>
        </content>
    </entry>

    <entry>
        <title>March 10, 2006</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2006-03-10</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2006-03-10"/>
        <published>2006-03-10</published>
        <content type="xhtml">
<p>
I finished reading an updated version of <a target="_blank" href="http://jeantessier.com/SoftwareEngineering/MartinFowler.html">Martin Fowler</a>'s
<a target="_blank" href="http://martinfowler.com/articles/newMethodology.html">The New Methodology</a>,
his article on agile processes.  In it, he talks about how they distinguish
themselves by focusing on the iterative nature of development and being
people-centric.
</p>

<p>
I have been thinking about this lately.  To me, agile processes are first
and foremost about feedback.  They try to make you close the feedback loop and
keep it real short, so you can get a lot of good information in a timely manner
and better steer the project especially in the face of changing
requirements.
</p>

<p>
A friend of mine keeps mixing methodologies and individual practices.  He
talks of the Test-Driven Development methodology or the Pair Programming
methodology.  I don't know that it's really worth my time to try to set him
straight, that these are just practices in a larger context, not ends in and of
themselves.  For what he needs, his concerns are of a higher nature: get the
software done and answer customer needs.  His interests do not lie in knowing
the finer details of this methodology versus that methodology.  And it's OK.
He focuses on figuring out what needs to be done and he can let the developers
worry about the details of which methodology and which practices to put in
place to do it.
</p>
        </content>
    </entry>

    <entry>
        <title>November 30, 2005</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-11-30</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-11-30"/>
        <published>2005-11-30</published>
        <content type="xhtml">
<p>
I learned today, quite by accident, that John Vlissides passed away a few
days ago.  He was one of the "Gang of Four", the writers of
<a target="_blank" href="http://www.amazon.com/exec/obidos/tg/detail/-/0201633612/qid=1042781541/sr=8-1/ref=sr_8_1/104-8608372-8129501?v=glance&amp;s=books&amp;n=507846">Design Patterns</a>.
I was fortunate enough to meet him, once, at PLoP '96.  He was on my workgroup
and he was a very positive influence.  He was very nice and he liked my paper
a lot.  :-)
</p>

<p>
I was presenting the patterns from my MSc work.  The one about
<a target="_blank" href="http://www.iro.umontreal.ca/~keller/Layla/remote.pdf">Remote Operation</a>
caught his eye and I remember him saying he wished he had had it
when they were writing the Proxy pattern.  I was quite awed that one of
software's great would appreciate my work.  During the workshop sessions, he
was just one of us, looking at papers and commenting constructively on them.
I fell very fortunate for these few moments spent in his company back then.
</p>

<p>
John Vlissides died on November 24, 2005, after a long fight with cancer.
There is a <a target="_blank" href="http://www.c2.com/cgi/wiki?JohnVlissides">memorial</a> on
Ward Cunningham's original Wiki.
</p>
        </content>
    </entry>

    <entry>
        <title>October 25, 2005</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-10-25</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-10-25"/>
        <published>2005-10-25</published>
        <content type="xhtml">
<p>
Google Base was leaked today.  Screenshots showed up on various blogs less
than one hour after the site was briefly open to public access.  It is quite a
change to work for a company where everything is under a very powerful
microscope.
</p>
        </content>
    </entry>

    <entry>
        <title>October 19, 2005</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-10-19</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-10-19"/>
        <published>2005-10-19</published>
        <content type="xhtml">
<p>
Had a discussion at work about how comments lie and you shouldn't rely on
them too much.  Of course, eXtreme Programming advocates actually recommend you
don't even bother with comments.  My coworkers don't agree.  And they wish all
this <i>nonsense</i> would just end.
</p>

<p>
In my opinion, comments rely on human nature to stay current, which is
highly unreliable.  Eventually, as the team grows and the complexity increases
and the release pressure builds, the effort required to maintain the comments
exceeds their ROI.  It in in the fundamental nature of comments to lie, no
matter how hard you fight it.  In the end, entropy will win.
</p>

<p>
My colleagues' counter-argument is that you don't really come upon such bad,
<i>lying</i> comments all that often.  And it is already hard enough to get
programmers to write comments, we don't need to discourage them further.  One
could say that yes, it is hard, and they should be spending their energy
writing code instead.
</p>

<p>
This discussion is far from over.
</p>
        </content>
    </entry>

    <entry>
        <title>September 15, 2005</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-09-15</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-09-15"/>
        <published>2005-09-15</published>
        <content type="xhtml">
<p>
Looked into <a target="_blank" href="http://www.opensymphony.com/webwork/">WebWork</a>, a
web application framework based on MVC-2.  I've always been unclear about the
distinction between MVC-1 and MVC-2, but reading through it finally drove the
point home.  In MVC-1, the navigation between controllers and views is embedded
in the JSPs (views) themselves.  In MVC-2, the navigation is encapsulated in a
central dispatcher and usually driven declaratively by a configuration file.
WebWork also uses an Inversion of Control framework to inject dependencies into
components that make up the MVC-2 structure.
</p>

<p>
I have been considering for some time to redo the Dependency Finder web app
with some kind of MVC structure.  Right now, all the logic is embedded into the
JSPs themselves as large scriplets.  While this is not maintainable on  large
scale project, in the case of Dependency Finder it kept things simple and kept
the size of the WAR file down.  At one point, I thought of using Struts, but
the libraries it requires were too big and I didn't want to ship them with
Dependency Finder.  I'll have to see if it's the same for WebWork.
</p>

<p>
It feels nice to learn something new and on the cutting edge.  It had been
a while.
</p>
        </content>
    </entry>

    <entry>
        <title>September 13, 2005</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-09-13</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-09-13"/>
        <published>2005-09-13</published>
        <content type="xhtml">
<p>
I realized I'm working with the author of <a target="_blank" href="http://www.edwardh.com/jsunit/">JsUnit</a>,
<a target="_blank" href="http://www.edwardh.com/">Edward Hieatt</a>.  He leads a small group
that does eXtreme Programming and it is quite refreshing to have somebody else
push for XP practices, for a change.  He and the rest of his group are pretty
smart and it is a joy to work with them.  We share many points of view when it
comes to developing software.
</p>

<p>
He has a nice sideline going on at <a target="_blank" href="http://www.agilestuff.com">agilestuff.com</a>.
</p>
        </content>
    </entry>

    <entry>
        <title>September 01, 2005</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-09-01</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-09-01"/>
        <published>2005-09-01</published>
        <content type="xhtml">
<p>
I learned today that people are spreading nasty rumors about me at my old
job.  Apparently, someone accused me of having badmouthed the company during my
last days there; which is simply not true.  It is a great company with a great
product and I wish them all the success in the world (I own stock in the
company, after all).  And then, someone else questioned my behavior after I'd
given my notice.  I continued working to the best of my ability and even
volunteered for a task that took most of my last week and involved training a
newbie at the same time.  If this is reprehensible, I hope everyone is just as
bad as me when they leave their job.
</p>

<p>
A friend told me to forget about it and not let it get to me.  But I feel
hurt and it cast a shadow on what's otherwise been a great week at my new job.
I'll heed the advice and not pursue the matter any further.  It's just
disappointing when you work hard to preserve relationships and one bad apple
can undo it all and there's not much you can do about it.  I can only hope that
the people there will see this for what it is.
</p>
        </content>
    </entry>

    <entry>
        <title>August 29, 2005</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-08-29</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-08-29"/>
        <published>2005-08-29</published>
        <content type="xhtml">
<p>
Started work at <a target="_blank" href="http://www.google.com/">Google</a>.
</p>
        </content>
    </entry>

    <entry>
        <title>August 26, 2005</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-08-26</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-08-26"/>
        <published>2005-08-26</published>
        <content type="xhtml">
<p>
Last day at <a target="_blank" href="https://www.linkedin.com/">LinkedIn</a>.
</p>
        </content>
    </entry>

    <entry>
        <title>August 16, 2005</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-08-16</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-08-16"/>
        <published>2005-08-16</published>
        <content type="xhtml">
<p>
Gave my two week notice at <a target="_blank" href="https://www.linkedin.com/">LinkedIn</a>.
</p>
        </content>
    </entry>

    <entry>
        <title>May 27, 2005</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-05-27</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-05-27"/>
        <published>2005-05-27</published>
        <content type="xhtml">
<p>
Again with Skowronski.  This time, it's Warren Keuffel and my beloved
<a target="_blank" href="http://jeantessier.com/SoftwareEngineering/SoftwareDevelopmentMagazine.html">Software Development Magazine</a>
that are at it.  In the June 2005 issue, Keuffel picks up Skowronski's rant and
concludes with an omnious prediction that by focusing on agility, we might be
driving innovation out of our field.  To me, it looks like Keuffel fell in the
same trap of seeing everything as a zero-sum game.  I still humbly disagree, as
you can read below.
</p>
        </content>
    </entry>

    <entry>
        <title>May 18, 2005</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-05-18</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-05-18"/>
        <published>2005-05-18</published>
        <content type="xhtml">
<p>
I was finally able to attend a BayXP meeting again.  I missed quite a few in
a row due to working late those particular evenings at the office or other
distractions.  I was able to make it to the
<a target="_blank" href="http://www.thoughtworks.com/us/">ThoughtWorks</a> offices in San
Francisco at watch a presentation on <a target="_blank" href="http://fitnesse.org/">Fitnesse</a>.
Exposed brick walls, exposed old wood rafters, the place had character
despite the earthquake retrofitting.
</p>

<p>
The talk was pretty lively and was a nice introduction to working with
Fitnesse and its place in the development process than a nuts and bolts view
into writing fixtures.  Details of the talk are
<a target="_blank" href="http://agileworks.blogspot.com/2005/05/joy-and-pain-with-fitnesse.html">here</a>.
</p>

<p>
I met with two former colleagues from my days at Epicentric and Vignette
who were at the meeting.  We all work for separate startups now.
</p>
        </content>
    </entry>

    <entry>
        <title>February 04, 2005</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-02-04</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-02-04"/>
        <published>2005-02-04</published>
        <content type="xhtml">
<p>
Maybe Test-Driven Development is really <i>MDA in Java</i> in the way that
<i>tests</i> are really an executable specification and writing them first is
really a way to do design rather than testing.
</p>
        </content>
    </entry>

    <entry>
        <title>February 01, 2005</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-02-01</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2005-02-01"/>
        <published>2005-02-01</published>
        <content type="xhtml">
<p>
Follow up on Victor Skowronski from readers' letters in the December 2004
IEEE Computer magazine.  Readers comment on how Skowrowski either doesn't
really understand agile processes or doesn't give them a fair chance.  Agile
methods promote adaptability, adjusting themselves to their surroundings and
finding what works best for each individual team.  This point was completely
lost on Skowronski.
</p>

<p>
Of course, Skowronski had to respond.  When he is not dismissive of the
critique, he simply repeats himself.  He really sees the problem-solver / 
people skill relationship as a zero-sum game.  If you try to better skills on
one side, it can only be at the expense of the other.  Poppycock!  I thought
we'd moved past this idea in our understanding of personalities a long time
ago.
</p>

<p>
One of the readers and Skowronski worry that agile methods keep putting off
working on hard problems in favor of delivering features.  As a result, they
can let prevent a project from discovering fatal flaws until a lot of resources
have been spent already.  They must had skipped some pages when reading on
agile methods.  My understanding has always been that you tackle risk early on
agile peojects, precisely to ferret out risk and identify those possibly fatal
flaws as quickly as possible.  Such flaws may very well include the team not
being able to come up with a solution to a particular problem.  But the agile
team makes sure that the customer gets the most out of the project before they
possibly decide to cancel it.  And the customer, <i>in discussion with the agile team</i>,
controls priorities and decides which risks to tackle in which order.  The
customer holds the strings of the purse and gets to stear the project.  He or
she does not do so blindly, but informed from the regular and frequent
feedback from the developers.
</p>
        </content>
    </entry>

    <entry>
        <title>December 11, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-12-11</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-12-11"/>
        <published>2004-12-11</published>
        <content type="xhtml">
<p>
Somebody on the
<a target="_blank" href="http://groups.yahoo.com/group/testdrivendelopment">TDD</a> Yahoo!
group suggested that advocates of test-driven development use a logo to tell
the world.  Someone put a few on
<a target="_blank" href="http://www.testdriven.com/modules/tinycontent/index.php?id=1#programme">testdriven.com</a>
and I put one of them on my website.
</p>

<p>
<img src="http://testdriven.com" /><img src="http://testdriven.com/programs/imtd2.gif" /><br />
</p>
        </content>
    </entry>

    <entry>
        <title>December 03, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-12-03</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-12-03"/>
        <published>2004-12-03</published>
        <content type="xhtml">
<p>
A colleague showed me an article in the October 2004 IEEE Computer magazine
by Victor Skowronski.  The title says it all:
<i>Do Agile Methods Marginalize Problem Solvers?</i>  In it, he says that great
problem solvers work alone, at their own pace, and make progress in quantum
leaps that cannot be rationalized or predicted.  Since agile methods focus on
collaboration and teamwork and small iteration that track progress, they make
it hard for the solitary problem solvers to contribute effectively.  The
author argues that problem solvers are the best programmers, so an
organization that adopts agile methods effectively cuts itself from its best
elements.
</p>

<p>
That's a whole lot of baloney!
</p>

<p>
He is saying that entire organizations should jump through hoops in order to
accomodate prima donas.  It's OK if everbody else is miserable and morale is
very low.  The exceptional and unpredictable talent of the prima dona will
make up for it and pull the organization through.  When you find a business
manager that buys this, let me know.
</p>

<p>
The reality of modern day software development is that it is a team effort.
The biggest challenge is managing the development itself and making sure that
the business side will get what they need in time.  There are still hard
problems that require lots of intellectual work, but there are many more
projects that are mundane and require a large amount of less hard work.  On the
typical corporate project, you need teamwork and predictability which is what
agile methods give you.
</p>

<p>
The author also contends that hard problems can only be solved by solitary
labor, where the problem solver must reflect on the problem and will eventually
receive illumination.  I am not ready to admit that this is the only way to go.
There are many examples of really hard problems tackled successfully by large
teams: the space programs, the Panama Canal, modern computers.  For large teams
to work, you need good communication within the team and the ability to tap
everyone's potential.  Making everyone miserable and resting all your hopes on
one miracle worker is irresponsible.
</p>
        </content>
    </entry>

    <entry>
        <title>November 17, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-11-17</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-11-17"/>
        <published>2004-11-17</published>
        <content type="xhtml">
<p>
Today, I attended a
<a target="_blank" href="http://www.agitar.com/events/000104.html">developer testing forum</a>
hosted by <a target="_blank" href="http://sdforum.org/">SDForum</a> and
<a target="_blank" href="http://www.agitar.com/">Agitar</a>.  The highlight was a keynote by
Kent Beck himself.
</p>

<p>
The event started with Sriram Sankar giving a talk about extreme programming
at Google and how it fits well with their culture of empowering developers.  But
given their scale, they need a little more process with some degree of initial
degree and peer reviews both of design and before checkin.  There is also a
large body of mandatory rules that go beyond coding style to include testing
practices.  They have the good sense of providing initiation and training for
new employees.  They introduced XP as a grassroot, viral-growth effort and it
seems to be catching on slowly.  They have been able to have stable builds and
can ensure backward compatibility thanks to a large body of tests.  They also
use live monitoring of production logs to drive projectors.  I once saw a
similar setup at Schwab, it's pretty neat.  "Great code comes from happy XP
engineers;" suddely I feel like a <a target="_blank" href="http://www.realcaliforniacheese.com/">cow</a>.
</p>

<p>
Next was a disussion panel with Rob Mee (Pivotal Computer Systems), Russell
Gold (Oracle and HttpUnit), Sri Muthu (Wells Fargo), and David Vydra
(<a target="_blank" href="http://testdriven.com/">testdriven.com</a>).  The main message was
that the business side has always assumed that the development side was doing
appropriate testing, even though it was not always true.  But lately, they have
started to ask for the artifacts of our testing.  Since they always assumed we
were testing, they won't be giving us more time so we can start doing it now.
There was even a suggestion that it is tantamount to professional negligence
for today's programmers not to do TDD.  They have seen a roughly 30% adoption
rate among programmers; much stronger with junior developers that senior ones
that are already set in their ways.
</p>

<p>
Which brings us to the final keynote given by Kent Beck.  The talk centered
around the word <i>accountability</i>.  Not as who gets the blame, but rather
as being able to render account, why and how you did what you did.  TDD helps
us do this by recording our assumptions at the time we did the development.  A
new edition of his book,
<a target="_blank" href="http://www.amazon.com/exec/obidos/tg/detail/-/0201616416/ref=pd_sim_books_2/104-8608372-8129501?v=glance&amp;s=books">eXtreme Programming Explained</a>,
is due out soon, with updated practices and more feedback from real life
experience.
</p>

<p>
I got him to sign my copy of "Planning eXtreme Programming", which I had
just finished reading the day before.
</p>

<p>
The forum closed with a demo of Agitar's flagship product: Agitator.  It
analyzes your Java code and automatically generates test batteries that try to
get 100% branch coverage.  It was very impressive, the way they use all the
constants in your code to generate test data and can automatically detect
assertions in your code, which you can instantly turn into method or class
invariants.
</p>

<p>
Closed the day with a <a target="_blank" href="http://www.jera.com/bayxp/">BayXP</a>
meeting with Jeff McKenna.  We discussed the planning game.  He mentioned how
you can use the release plan to provide a bound context for the iterations, so
it doesn't look like an endless sucession of work.  He found that for him, it
was not worth the effort to estimate individual tasks to refine the estimates.
Whether or not he does it, he gets the same accuracy.  You still need to break
down stories into tasks, but don't waste too much time estimating them.  A lot
of the talk was reinforcement of the contents of "Planning eXtreme Programming"
and "Waltzing with Bears", two books I just read very recently.  Nice
coincidence.
</p>

<p>
We started doing planning with index cards at work, so this will be
helpful.  I actually got a coworker to come to the meeting too.
</p>
        </content>
    </entry>

    <entry>
        <title>August 16, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-08-16</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-08-16"/>
        <published>2004-08-16</published>
        <content type="xhtml">
<p>
Started working at <a target="_blank" href="https://www.linkedin.com/">LinkedIn</a>.
</p>
        </content>
    </entry>

    <entry>
        <title>July 30, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-07-30</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-07-30"/>
        <published>2004-07-30</published>
        <content type="xhtml">
<p>
Volunteered to get laid off from <a target="_blank" href="http://www.vignette.com/">Vignette</a>.
</p>
        </content>
    </entry>

    <entry>
        <title>July 29, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-07-29</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-07-29"/>
        <published>2004-07-29</published>
        <content type="xhtml">
<p>
Accepted a job offer from <a target="_blank" href="https://www.linkedin.com/">LinkedIn</a>.
</p>
        </content>
    </entry>

    <entry>
        <title>June 25, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-06-25</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-06-25"/>
        <published>2004-06-25</published>
        <content type="xhtml">
<p>
A friend asked me how I saw myself in the realm of software development.
As I retold my earlier musings about engineering and craftsmanship, he
mentioned that French carmaker <a target="_blank" href="http://www.renault.fr">Renault</a> came
up with a new slogan: "<i>Cr&amp;eacute;ateur d'Automobiles</i>", which loosely
translate to "Creator of Cars."  He suggested that I might consider myself a
"creator of tools" or a "software creator."  It suggests a certain part of
innovation and care for one's work.  It does not sound as quaint as "craftsman"
and laypeople would get he gist of it immediately.
</p>
        </content>
    </entry>

    <entry>
        <title>June 22, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-06-22</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-06-22"/>
        <published>2004-06-22</published>
        <content type="xhtml">
<p>
I don't care much for the work ethics in software that make it cool for
someone to sacrifice their personal life to the company.  Why would you give up
everything that makes you a balanced individual to benefit a faceless
corporation that will throw you away like a used towel the moment you are no
longer worth their while?  I've seen it with large corporations and I've seen
it with startups.  What you put into your personal life will come back to you
throughout your life.  What you put into a company will most likely never come
back to you, unless you happen to own the company, and I don't mean owning a
few thousand shares.
</p>

<p>
If you don't look out for yourself, nobody else will.
</p>

<p>
It's OK to go beyond the call of duty on occasion, as long as you stand to
benefit from it in some remote fashion.  But don't lose sight of your own best
interest, don't let it get to a point where you are just being used.  The
others are in it for themselves, not for you.  Stay with them only for as long
as your goals lie in the same direction as theirs.
</p>
        </content>
    </entry>

    <entry>
        <title>May 27, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-27</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-27"/>
        <published>2004-05-27</published>
        <content type="xhtml">
<p>
Read a
<a target="_blank" href="http://pup.princeton.edu/books/rochlin/chapter_04.html">chapter on Taylorism</a>
by Prof. Rochlin.  It is interesting that I am currently reading
Pete McBreen's "Software Craftsmanship" where he advocates that we turn away
from from modern, neo-Taylorist, deskilled software engineering and return to
the traditional ways of craftsmen.
</p>

<p>
The premise looks tempting, that software engineering should be driven like
a craft, where masters lovingly guide and mold their apprentices, passing on
their hard-earned experience.  But I'm not sure this return to the ways of the
past is really the answer.  There is something to be said for the industrial
revolution and the achievements of our modern technological society: longer
life expectancy, more leisure time, etc.  The sentimental attachment to
idealized master-apprentice relationships and artisans who take pride in their
work was a small price to pay, considering what society as a whole gained in
return.
</p>

<p>
I'm sure I would enjoy my job a whole lot more under a craftsmanship model
then the proposed software engineering roles where every task has been
deconsructed and optimized.  I would gain a lot in enjoying my life.  But I'm
not sure that it is in the society's best interest to have the entire
profession go back in time like that.
</p>

<p>
While Rochlin lists the profound transformations to the workplace triggered
by neo-Taylorism and its negative impact on the workers, he says we don't know
what the longterm effect on society will be.  It possibly will be negative,
but it could also turn out to be positive.  Industrialization has made the
Western Hemisphere the dominant force on the planet.  Would you go back to
19th Century living conditions just so blue-collar workers can feel better?
Remember that back then, living was hard, with little leisure for most; child
mortality rates were high.  People didn't live quite that old.  Do we reaaly
want to go back to <i>that</i>?
</p>

<p>
I don't have any answers for now, just a bunch of questions and things to
ponder for a while.  More later.
</p>
        </content>
    </entry>

    <entry>
        <title>May 20, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-20</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-20"/>
        <published>2004-05-20</published>
        <content type="xhtml">
<p>
Someone reacted to my suggestion for <a target="_blank" href="http://jeantessier.com/SoftwareEngineering/MartinFowler.html">Martin Fowler</a>'s
article yesterday by mentioning Pete McBreen's <i>Software Craftsmanship</i>.
He said how it got him away from calling himself a
"software engineer" and changing to a "software craftsman" instead.  I went
through some of the same questioning myself a while ago and I also feel closer
to a software craftsman than an engineer.  But the reality of it is that the
average person sees all software professionals as <i>software engineers</i>
without distinguishing between the finer points.  So I need to adjust my
message according to my audience, what else is new.
</p>
        </content>
    </entry>

    <entry>
        <title>May 19, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-19</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-19"/>
        <published>2004-05-19</published>
        <content type="xhtml">
<p>
Attended tonight's BayXP meeting with guest Eric Evans.  During the talk,
there were some comments about what <i>software architecture</i> really means
and it brought back memories of <a target="_blank" href="http://jeantessier.com/SoftwareEngineering/MartinFowler.html">Martin Fowler</a>'s
article on the topic:
<a target="_blank" href="http://martinfowler.com/ieeeSoftware/whoNeedsArchitect.pdf">Who Needs an Architect?</a>
</p>

<p>
Eric's talk was very enlightening.  He discussed his book
<i>Domain-Driven Development</i> and how it applies to extreme programming.
His approach focuses on taking a careful look at the problem domain and
deriving the vocabulary of the project from it.  This helps keep the
customer on board.
</p>

<p>
I also met a former colleague who is now doing eXtreme Programming at his
new place of work.  He described his
<a target="_blank" href="http://slesinsky.org/brian/code/starting_xp.html?seemore=y">experience in his blog</a>.
Reading it brought back fond memories of my first experiments
with pair programming, and how I felt exhausted at the end of the day; but it
was a good exhaustion, coming from knowing we had accomplished a lot that day.
I'm glad Brian is enjoying his experience just as I did mine.
</p>
        </content>
    </entry>

    <entry>
        <title>May 18, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-18</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-18"/>
        <published>2004-05-18</published>
        <content type="xhtml">
<p>
Dragged my direct coworkers (3 + my direct report) to a rehearsal for a talk
I have to give tommorrow to the full Engineering department.  They were very
reluctant at first to have me waste a whole 3 minutes of their time.  They even
enquired if attending tommorrow's was necessary after having been through the
rehearsal.  Now it's not like I only see these people once a week.  I go to
lunch with them almost everyday, we sit in a bullpen together.  We complain
about the same things together.  By now you should get it that we're fairly
close to each other.  And yet they would not lend me a hand when I asked for a
test audience for my talk.  It depressed me a little.
</p>
        </content>
    </entry>

    <entry>
        <title>May 17, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-17</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-17"/>
        <published>2004-05-17</published>
        <content type="xhtml">
<p>
Played with Visio and Pavel's UML 2.0 templates.  I really like the
<i>ball and socket</i> notation for showing that a class uses an interface
of another class.  It is aesthetically very pleasing.
</p>
        </content>
    </entry>

    <entry>
        <title>May 14, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-14</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-14"/>
        <published>2004-05-14</published>
        <content type="xhtml">
<p>
Forword to Domain-Driven Design.  I really like how
<a target="_blank" href="http://jeantessier.com/SoftwareEngineering/MartinFowler.html">Martin Fowler</a> says that domain modelers should
be able to talk to customers in the domain language and talk with developers in
the implementation language, e.g., Java.  Do you think he means by
<i>domain modeler</i> what our current analysts should be doing?  I, for one think so,
which makes the current situation that much more depressing.
</p>
        </content>
    </entry>

    <entry>
        <title>May 13, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-13</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-13"/>
        <published>2004-05-13</published>
        <content type="xhtml">
<p>
Presentation judo.  Very funny.
</p>
        </content>
    </entry>

    <entry>
        <title>May 07, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-07</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-05-07"/>
        <published>2004-05-07</published>
        <content type="xhtml">
<p>
I just love it when I read about a new pattern only to find out that it
describes something I was already doing for some time.  This happened today,
as a discussion on a mailing list pointed me to the Unit of Work pattern.  It
is described in a lot of details in <a target="_blank" href="http://jeantessier.com/SoftwareEngineering/MartinFowler.html">Martin Fowler</a>'s
book <i>Patterns of Enterprise Application Architecture</i> and is at the heart
of the <a target="_blank" href="http://hibernate.org/">Hibernate</a> framework.
</p>

<p>
The basic idea is to have an object, the unit of work, keep track of all
changes to a group of objects you've read from the database (or created or
deleted).  When you are done manipulating these objects, you commit the unit of
work object, which saves all changes to the database simultaneously.  It does
not address distributed databases and two-phase commit issues, but these could
be orthogonal concerns, handled within the unit of work object itself, I
guess.
</p>

<p>
It turns out that I did something similar on my own  few years back, where
individual changes to existing objects were persisted immediately but creations
and deletions were accumulated in a <i>Transaction</i> object and committed
together.  It may very well be that by reading a lot about patterns and
database mapping, I unconsciously absorbed the patterns and then recalled it
when a need arose.  It's just cool that I now come across this documented piece
of knowledge that validates my decision from back then.
</p>
        </content>
    </entry>

    <entry>
        <title>March 15, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-03-15</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-03-15"/>
        <published>2004-03-15</published>
        <content type="xhtml">
<p>
Mary Poppendieck presentation on raising productivity in software
development.  This is related to her work on lean software development.  I've
put my notes on a <a target="_blank" href="http://jeantessier.com/SoftwareEngineering/bayxp.20040315.html">separate webpage</a>.
</p>
        </content>
    </entry>

    <entry>
        <title>March 12, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-03-12</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-03-12"/>
        <published>2004-03-12</published>
        <content type="xhtml">
<p>
Last month, a coworker and I got into an argument regarding the use of
interfaces versus abstract base classes.  We came to the realization that my
coworker wants to expose the minimum API possible, taking into account issues
of backward compatibility, whereas I want to grant maximum freedom to our
customers.  These two goals are not always easy to reconcile.  Today, I found
a <a target="_blank" href="http://martinfowler.com/bliki/SoftwareDevelopmentAttitude.html">bliki entry</a>
on <a target="_blank" href="http://jeantessier.com/SoftwareEngineering/MartinFowler.html">Martin Fowler</a>'s website that sums
it up pretty well.  He calls it the directing attitude (my cowoker) versus the
enabling attitude (me).
</p>
        </content>
    </entry>

    <entry>
        <title>March 05, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-03-05</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-03-05"/>
        <published>2004-03-05</published>
        <content type="xhtml">
<p>
I checked and they fixed my name on
<a target="_blank" href="http://www.sdmagazine.com/">Software Development</a> magazine's
website.
</p>

        </content>
    </entry>

    <entry>
        <title>February 20, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-02-20</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-02-20"/>
        <published>2004-02-20</published>
        <content type="xhtml">
<p>
I just noticed that the article in
<a target="_blank" href="http://www.sdmagazine.com/">Software Development</a> magazine
misspelled my name as "Tessler" instead of the correct "Tessier" with an "i".
Darn!  I've sent email to the writer, maybe they can fix the online version at
least.  Here's hoping.
</p>
        </content>
    </entry>

    <entry>
        <title>February 12, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-02-12</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-02-12"/>
        <published>2004-02-12</published>
        <content type="xhtml">
<p>
OK, I was a little rash.  Most of them are actually OK.  It turns out that
the first ones to answer were the one who took the least time to read what I
had to say.  After them, the other replies were very useful.
</p>
        </content>
    </entry>

    <entry>
        <title>February 11, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-02-11</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-02-11"/>
        <published>2004-02-11</published>
        <content type="xhtml">
<p>
XPers are a just bunch of hackers.
</p>

<p>
I sent a message to a couple of mailing lists regarding a design issue I've
been having at work, and they completely missed the point.  I described the
situation in a few classes and two alternatives, inquiring which one looked
best.  Their first reaction: this reeks of big design upfront, too much
complexity, this is all bogus.  It never occurred to them that there might
exist situations where that is the simplest design that might work.  They
immediately went into a frenzy about only custom code is good enough.  I never
occured to them that I might have ended up there by refactoring some simple
solution already.  There was no benefit of the doubt, I was labelled a BDUFer
the moment I set foot in there.
</p>

<p>
It just makes me mad.
</p>
        </content>
    </entry>

    <entry>
        <title>February 06, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-02-06</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-02-06"/>
        <published>2004-02-06</published>
        <content type="xhtml">
<p>
<a target="_blank" href="http://www.sdmagazine.com/">Software Development</a> magazine
published a piece on open source software in which they mention Dependency
Finder.  It is listed right alongside heavy hitters like LAMP (Linux, Apache,
MySQL, PHP), Perl, and JUnit.  My name is listed with the likes of Richard
Stallman, Larry Wall, Linus Torvalds, Yukihiro Matsumoto, Kent Beck, ...
</p>

<p>
... eh! ... wait a minute! ...
</p>

<p>
... all these guys are &amp;uuml;bergeeks! ...
</p>

<p>
They've put me in with a bunch of geeks!  Args!!!
</p>

<p>
<code>:-)</code>
</p>

<p>
Or more precisely: <code>:-D</code>
</p>
        </content>
    </entry>

    <entry>
        <title>February 04, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-02-04</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-02-04"/>
        <published>2004-02-04</published>
        <content type="xhtml">
<p>
For some time, I've been saying that if you can't communicate your ideas to
others successfully, it is just as if you hadn't had them in the first place.
What I mean by this is that the onus is on <b>you</b> to get the stuff out of
your head and it is your responsability to get the message across to your
audience.  Not everybody agrees with me, but that's what I say anyway.
</p>

<p>
Now, don't you just hate it when you come to some great conclusion after a
long and thorough reflexion, only to find out that someone from the Antiquities
beat you to it by thousands of years?  Today I came upon this quote attributed
to Thucydides, allegedly over 2,300 years ago:
</p>

<blockquote>
<i>A man who has the knowledge but lacks the power to express it is
no better off than if he never had any ideas at all.</i>
</blockquote>

<p>
A little more research showed that Thucydides was a historian.  The quote is
part of a speech by Pericles to the Athenian assembly, shortly before he died
in 429 B.C.
</p>

<p>
I found the quote in
<a target="_blank" href="http://www.acm.org/sigplan/oopsla/oopsla96/how93.html">How to Get a Paper Accepted at OOPSLA</a>.
It is now at the top of my list of favorite quotes.
</p>
        </content>
    </entry>

    <entry>
        <title>February 03, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-02-03</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-02-03"/>
        <published>2004-02-03</published>
        <content type="xhtml">
<p>
I read
<a target="_blank" href="http://www.netobjectives.com/ezines/ezine_2004_01.pdf">a paper by Allan Shalloway</a>,
of <i>Design Patterns Explained</i> fame, on the
usefulness of design patterns.  Again, he warns not focus too much on the
particular solution, but rather on the forces at play in the pattern and how
they are resolved.  That's where the true value of design patterns is.  Some of
it boils down to the usual "program to an interface, not an implementation" and
"favor composition over inheritance".  As always, you want to encapsulate what
changes to limit the impact of these changes to the rest of the code.
</p>
        </content>
    </entry>

    <entry>
        <title>January 18, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-01-18</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-01-18"/>
        <published>2004-01-18</published>
        <content type="xhtml">
<p>
I saw that <a target="_blank" href="http://www.thoughtworks.com/">ThoughtWorks</a> is hiring.
Someone posted on the <code>pragprog</code> list that they were applying there
and wanted a little more information regarding their hiring process.  Now,
<a target="_blank" href="http://jeantessier.com/SoftwareEngineering/MartinFowler.html">Martin Fowler</a> works there and I like him very
much.  At UML 2000, he had talked about the place and seemed very ecstatic about
it.  He is big on XP, and Alistair Cockburn referred to some of Fowler's
experiences with XP at ThoughtWorks.  So I took a look at their website and it
turns out they have a office right here in San Francisco.  My commute wouldn't
even have to change, their office is right by the train station.  Now it
remains for me to see if I'm ready to move on and if I'd like to work as a
consultant.  I'm still far from decided on either count.
</p>
        </content>
    </entry>

    <entry>
        <title>January 15, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-01-15</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-01-15"/>
        <published>2004-01-15</published>
        <content type="xhtml">
<p>
I attended a webcast by Robert C. Martin on
<a target="_blank" href="http://webevents.broadcast.com/cmp/wcs/detail.asp?event_id=11483">the intersection of agility, objects, and UML</a>.
He was his usual perky self and a lot of his material was the usual stuff
about OO principles and dependency management.  He threw in some updated
additions, mentioning Model-Driven Architecture (MDA) and aspects.  I was at
work with some coworkers.  They expressed some skepticism about the feasability
of fully automated acceptance tests and whether or not his approach to
documentation (or lack thereof) is realisic.  For my part, I was pleased with
the talk.  The tone was relaxed and the contents very informative.
</p>
        </content>
    </entry>

    <entry>
        <title>January 13, 2004</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-01-13</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2004-01-13"/>
        <published>2004-01-13</published>
        <content type="xhtml">
<p>
I read an
<a target="_blank" href="http://martinfowler.com/ieeeSoftware/dataAccessRoutines.pdf">article by Martin Fowler on accessors</a>.
It reiterated some of the ground rules regarding an object's state and how
you expose it to other objects.
</p>

<p>
His <a target="_blank" href="http://www.martinfowler.com/bliki/">bliki</a> also had a
reference to a
<a target="_blank" href="http://www.williamcaputo.com/archives/000053.html">Bill Caputo</a>
piece on XP.  It's a reaction to a criticism of XP from
<a target="_blank" href="http://www.stickyminds.com/sitewide.asp?ObjectId=3248&amp;Function=DETAILBROWSE&amp;ObjectType=ART">Gerold Keefer</a>.
The whole thing seemed overinflated, but Gerold Keefer did
raise some valid questions to make you apply some critical thinking before you
implement XP in your workplace.  Fowler and Caputo are quick to remind people
that agility's focus is on people and finding ways to let a team do its work.
</p>

<p>
JavaPro also had an article on "interface-driven development".  It would
have been good, if not for the fact that I've been hearing this message ever
since I opened the GoF book on design patterns.  Since then, it has been one
of my most important design rules: code to interfaces.  I guess it needs
restating every once in a while, to make sure everyone is aware of it.
</p>
        </content>
    </entry>

    <entry>
        <title>December 02, 2003</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-12-02</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-12-02"/>
        <published>2003-12-02</published>
        <content type="xhtml">
<p>
I read a
<a target="_blank" href="http://www.sys-con.com/story/?storyid=37795&amp;DE=1">nice article on Test-Driven Development</a>
in JDJ.  It's a nice, concise description of TDD.  I like TDD.
I try to use it as much as I can now.
</p>
        </content>
    </entry>

    <entry>
        <title>November 20, 2003</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-11-20</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-11-20"/>
        <published>2003-11-20</published>
        <content type="xhtml">
<p>
I attended a webinar by Barbara Warthen where she tried to compare software
development with software engineering.  She's a process consultant and she
basically exhorted the virtues of heavy-weight processes.  She used the usual
comparison of building a doghouse as opposed to a skyscraper and how the degree
of complexity in software has shot up since the '50s.  One nice thing is that
she did provide updated data from the Standish Group on project success rates.
Things haven't changed much since the '70s.
</p>

<p>
She tried to compare current project management practices to buying a car,
saying the current state of affair was more like getting only half the
features: no brakes, no steering, etc.  Actually, I think the analogy works
pretty well indeed.  The advertisement says "starting at $9,999.99" but they
show you the $20,000 model with all options.  If you want the car on display,
you're gonna have to pay a lot more in the end, or if you stick the price, you
won't get what you were expecting.  I was kinda happy to see this one backfire
on her.  :-)
</p>

<p>
She described software engineering as applying common sense to solving
problem.  To her, that's the essence of engineering in general.  The fact that
software is not a physical entity was irrelevant.  I don't fully agree.  The
fact that software is not physical changes the whole economics of producing
software.
</p>

<p>
She talked a little bit about IEEE software engineering standards and
<a target="_blank" href="http://www.swebok.org/">SWEBOK</a>.  She also touched on the
<a target="_blank" href="http://www.sei.cmu.edu/">SEI</a>'s CMM level.  All sources that
advocate very heavy processes.  She did touch on agile methodologies toward the
end, quoting common sense things like don't do documentation for the sake of
documentation or don't follow your process for the sake of jumping through
hoops.  But she didn't go to any great length about this.
</p>

<p>
In the end, she claimed a good process and big design up front paid for
themselves by reducing programming time.  Since all the decision are made
during analysis and design, the coding phase is drastically simplified.  The
way I understand this is that the analysts and designers call all the shots and
validates their decisions using vaporware.  Coding is reduced to mindless
drivel for code monkeys to do.  I don't care much to work in that kind of
environment.  Life is short, I want to enjoy it and find fun and fulfillment in
my work.  I don't care for being someone else's code monkey.
</p>

<p>
So overall, the webinar was useful and informative.  It provided a lot of
good and useful information.  But in the end, I choose to disagree with her
about the usefulness of heavyweight processes.
</p>
        </content>
    </entry>

    <entry>
        <title>November 17, 2003</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-11-17</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-11-17"/>
        <published>2003-11-17</published>
        <content type="xhtml">
<p>
I read two useful articles.
</p>

<p>
The first one was by Eric S. Raymond of open source fame.  He talked about
how the open-source movement and agile programming have a lot in common.  One
thing is for sure, Mr. Raymond does not suffer from too much humility.  But he
goes about showing how the open source practitioners have been following agile
practices for years but didn't have words to describe what they were doing.  So
both sides benefit from each other.  Open source validates agile practices in
real world development and agile methodologies provide a formal framework to
discuss <i>hacking</i>, as Raymond calls it.  You can read article at:
<a target="_blank" href="http://www.artima.com/weblogs/viewpost.jsp?thread=5342">http://www.artima.com/weblogs/viewpost.jsp?thread=5342</a>.
</p>

<p>
The second article was much more enlightening.  It was about ethics and
professionalism for software people.  A lot of people think of professional
behavior as dressing sharp and not offending anyone.  But author, Philip
Greenspun, argues that real professionalism should promote and advance the
procession.  Professional programmers should dedicate themselves to high
quality work, innovation, and sharing what they learn with others.  You can
read the article at:
<a target="_blank" href="http://tinyplanet.ca/projects/professionalism.html">http://tinyplanet.ca/projects/professionalism.html</a>.
</p>
        </content>
    </entry>

    <entry>
        <title>October 08, 2003</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-10-08</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-10-08"/>
        <published>2003-10-08</published>
        <content type="xhtml">
<p>
I attended this month's meeting of the <a target="_blank" href="http://www.jera.com/bayxp/">BayXP</a>.
<a target="_blank" href="http://xprogramming.com/">Ron Jeffries</a> was talking about some of
the things that are on his mind lately.
</p>

<p>
First, let's talk about the speaker.  He reminded me very strongly of a
former coworker who acted as a mentor to me when I entered the workforce.  It
was a little uncanny.
</p>

<p>
The talk was lively as he led us through some of his latest thoughts on the
subject of planning.  Through his teaching exercises, he has had some insights
into the dynamics of planning.  Students with no real knowledge of the tasks'
value or difficulty can still generate pretty good schedules.  Even random
schedules can still work out pretty good.  So how can we apply this knowledge
to real projects?  No definitive answers yet, but some interesting questions.
More to come later, I guess.
</p>
        </content>
    </entry>

    <entry>
        <title>October 07, 2003</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-10-07</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-10-07"/>
        <published>2003-10-07</published>
        <content type="xhtml">
<p>
I have come to realize that the essential skill for anyone who wants to do
any kind of convincing or mentoring is <i>empathy</i>.  You just have to be
able to put yourself in the other person's place and understand things from
<i>their</i> point of view.  Not just how you would understand things if, like
them, you didn't know what you now know, but how <i>they</i> might try to
understand things, how <i>they</i> think, how <i>they</i> might go about trying
to solve a problem.  The issue is not how you would do in their place, but
rather how <i>they</i> go about it.
</p>

<p>
This came about after I discussed some complex piece of software with a
coworker.  We are both good at what we do, but I still had a hard time grasping
some of the concepts he was trying to convey.  Not because of their utmost
complexity; some of them were pretty simple.  It had more to do with how he
chose to present them to me, in a manner that made a lot of sense to him but
was quite unfamiliar to me.  I eventually got what he meant, but I had to do
quite a bit of work to get it.  If I hadn't been in need of that information, I
would not have bothered trying to understand what he was saying.
</p>

<p>
Now he could come back to me and say that I should have told him I didn't
understand what he was talking about.  But I really believe that it is the
responsibility of the communicator to get the message across.  You cannot count
on your audience to go the extra mile.  If it is important to you that your
message gets across, then it behooves you to take the steps necessary for this
to happen and communicate with your audience in a way that <i>they</i>
understand.
</p>
        </content>
    </entry>

    <entry>
        <title>September 29, 2003</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-09-29</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-09-29"/>
        <published>2003-09-29</published>
        <content type="xhtml">
<p>
More about this script I was talking about the other day.  It scans code to
collect lookup keys and generate a resource file with them.  I have been using
this script to verify that my resource file has all the keys needed by the
application, but my coworker justs wants to use it when he's done with his
application to generate the resource file automatically.
</p>

<p>
So today I took the script public within our development organization.
Someone complained that we should not use the script and that everyone should
maintain their resource file manually; to try an automated script is lazy and
error-prone.  <strong>Error-prone</strong>???  Synchronizing keys across
multiple files and doing it manually is error-prone.  Anything to automate that
is a step up!  And lazy?  Why,
<a target="_blank" href="http://c2.com/cgi/wiki?LazinessImpatienceHubris">lazines</a> is the
first virtue of a good programmer, according to Perl creator Larry Wall.  Of
course, he's talking about the kind of laziness that makes you do a lot of work
<b>now</b> so you don't have to do quite as much later.
</p>

<p>
I was tempted to start a flame war over this, but in the end my better
judgement prevailed.  In the process, I reacquainted myself with
<a target="_blank" href="http://c2.com/cgi/wiki?GodwinsLaw">Godwin's Law</a>.  I suggest you
do the same.
</p>
        </content>
    </entry>

    <entry>
        <title>September 18, 2003</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-09-18</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-09-18"/>
        <published>2003-09-18</published>
        <content type="xhtml">
<p>
When I write software, I care about doing a good job and writing well
structured code that will be easy to maintain.  Maybe I am not a computer
scientist but more of a <i>software craftsman</i>.  What kind of title would
that make?  I think it conveys a feeling of coming up with individual
solutions adapted to the problem at hand, not applying rote techniques from a
code book.  It rings of taking pride in one's work, of being highly skilled at
solving solving problems.  That sounds good to me.
</p>
        </content>
    </entry>

    <entry>
        <title>September 17, 2003</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-09-17</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-09-17"/>
        <published>2003-09-17</published>
        <content type="xhtml">
<p>
I had a chat with a coworker about agile processes, which turned into a
discussion of XP versus CMM.  While many consider them two extremes of one
spectrum, I don't think it is the case.  I think CMM has more to do with how
you look at your process, whatever that process is.  It could even be XP.  CMM
is more about how you monitor your process and look for ways to improve it.  I
do realize that most people take that as a license to have more paper and more
bureaucracy, but it doesn't have to be that way.
</p>

<p>
With that same coworker, we worked on a quick Perl script to automate this
one tedious task.  He asked me to look at his first draft, clean it up and
add two somewhat simple features.  Later, when I showed him my result, we got
into a discussion of the features and how they work.  It took me a while to
realize that I had assumed one way of using it and he had assumed another.  It
would be easy to make the script support both usage patterns, but we had to
spend some time convincing each other that both were valid use cases.  We
managed to work it out, but it was unexpectedly hard.  We are coworkers who
work together all the time, we know each other, we work on the same problems,
and still it took us a while to understand that the other could also be right.
On one hand, I can't help thinking that if it is this hard when we know each
other, what must it be between strangers?  And what if they don't even share
the same culture?  On the other hand, maybe it was harder because we had high
expectations of each other, since we are so close to one another.
</p>

<p>
I attended this month's meeting of the <a target="_blank" href="http://www.jera.com/bayxp/">BayXP</a>.
<a target="_blank" href="http://www.johnlevyconsulting.com/">John Levy</a> was presenting the
<a target="_blank" href="http://www.sustainablecomputing.org/">Sustainable Computing Consortium</a>.
</p>

<p>
First, let's talk about the speaker.  The invitation to the meeting made
Levy sound like an old timer who had seen it all.  He had been on large
projects throughout his lengthy career and would have great insights into
project management.  I was expecting a wizened old man of the old school, with
hard-earned knowledge about the nature of the beast.  It would be great to hear
why someone whom you would think more on the heavyweight side of process is
coming down instead on the side of eXtreme Programming.  Well, the guy is
barely fifty.  His resume looks fine, he's been around and on many projects,
but so have Scott Ambler and Martin Fowler and the other advocates for agile
processes.
</p>

<p>
And now for the Sustainable Computing Consortium.  This was recently started
by CMU, creators of SEI and the CMM levels.  Not quite a crowd pleaser at XP
meetings.  Then, there is the list of founding members: Microsoft, Oracle, and
a few others from pharmaceutical and financial outfits.  Not exactly the first
names to pop when you think agile development.  More like the purveyors of
bloated software and lovers of big process.  Someone said this might turn out
like CORBA, or another CMM-like excuse for throwing more process at problems.
Finally, the membership cost of $25,000 kinda threw people off.
</p>

<p>
So while the goals might seem laudable, time will tell if the execution
lives up to expectations.
</p>
        </content>
    </entry>

    <entry>
        <title>September 16, 2003</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-09-16</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-09-16"/>
        <published>2003-09-16</published>
        <content type="xhtml">
<p>
At the office, most developers use
<a target="_blank" href="http://www.intellij.com/">IntelliJ</a> to write Java and JSP code.  I
use Emacs.
</p>

<p>
I have to admit that IntelliJ that I almost switched, some time back, when
I saw the support for refactoring and the "Find Usages" function, which mirrors
Dependency Finder.  Fortunately, a friend mentioned
<a target="_blank" href="http://www.xref-tech.com/">Xrefactory</a>, an emacs add-on that does
refactorings and some "find usages"-like functionality (and more).  All for the
small price of $29.00.  So I have not jumped on the IntelliJ bandwagon, yet.
</p>

<p>
The main reason I want to stay with Emacs is so I can have the same
development environment at home and at work.  I can't afford the $500.00 to buy
IntelliJ for myself.  With Emacs and Xrefactory, I have the same environment at
work and at home for Dependency Finder.  That is, until you factor in that at
work, I have a Win2k machine that is relatively robust, while at home I have a
Win98 box that is very flaky.  I cannot install Linux on it because I need
Win98 for games, both for the kids and for myself.  :-)
</p>

<p>
But these past few days, I have had to work on some JSPs that use custom
tags developed by the company.  Everyone is laughing at me as I struggle with
them in Emacs, while they are having a good time with very extensive support by
IntelliJ.  Tag name auto-completion, automatic attribute detection, the works.
Someone actually challenged me to find equivalent support for JSPs in Emacs.
</p>

<p>
I found references to
<a target="_blank" href="http://mmm-mode.sourceforge.net/">MMM mode</a> at SourceForge.  This
allows multiple major modes to coexist in the same buffer, so HTML chunks can
use <code>html-mode</code> and scriptlets can use <code>java-mode</code> or
<code>jde-mode</code>.  From messages out there, it seems to require some
degree of adjustment to work correctly.  And the last release dates back to
February 2001.  Hasn't anyone done anything since?
</p>

<p>
Other references use
<a target="_blank" href="http://jeantessier.com/SoftwareEngineering/ftp://archive.cis.ohio-state.edu/pub/emacs-lisp/old-archive/misc/">multi-mode.el</a>,
a GNU package that is almost 10 years old!
</p>

<p>
Is there no hope for me to find a decent Emacs add-on for JSPs?  Will I
have to give up my beloved Emacs and succumb to IntelliJ?
</p>

<p>
On another note, I rediscovered
<a target="_blank" href="http://www.gameoftheyear.com/">Half-Life</a>.  I have been playing
most evenings instead of thinking about Dependency Finder.  I even reinstalled
Opposing Force and managed to make some progress in it too.
</p>
        </content>
    </entry>

    <entry>
        <title>September 15, 2003</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-09-15</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-09-15"/>
        <published>2003-09-15</published>
        <content type="xhtml">
<p>
Shared some thoughts with a colleage on what it means to be a software
engineer versus the other designations.  We did not come to any conclusion,
except that in real life, the distinction does not matter all that much.
</p>
        </content>
    </entry>

    <entry>
        <title>September 12, 2003</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-09-12</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-09-12"/>
        <published>2003-09-12</published>
        <content type="xhtml">
<p>
I'm catching blog fever.  I need to start expressing my views too.
</p>

<p>
Started a <a target="_blank" href="http://jeantessier.com/SoftwareEngineering/Books.cgi">reading journal</a> to keep track of the
books I read and what I think of them.  I need to do the same for articles
somehow.
</p>

<p>
I have been struggling lately with how to define myself.  My web page
starts with "I am a software engineer," but is that really what I want to
project?  What do people read in this?  Here are some alternatives and what I
think of each:
</p>

<dl>
<dt>
programmer
</dt>
<dd>
I write code.  That's what I do.  And I am very good at it,
writing complex code that is highly flexible.  But some people think
that programmers are nothing more than code monkeys, and that's not
how I want to be perceived.  So I need something a little more fancy.
Plus, when I write code, I do a lot of design too.  The two activities
go hand in hand: do a little design, write a little code, repeat.
This is not captured in most definitions of <i>programmer</i>.
</dd>
<dt>
software developer
</dt>
<dd>
Not quite the code monkey, but still quite low in the food chain.
In people's mind, this is the new term for <i>programmer</i>, with all
the baggage.
</dd>
<dt>
software designer
</dt>
<dd>
Feels a little pigeonholed.  People who usually care about this
level of distinction also believe in rigid job seggregation.  The
analyst analyzes.  The designer designs.  The programmer codes.  I
don't see it that way.  I do any of the above at one time or
another, depending on the need of the moment.
</dd>
<dt>
software engineer
</dt>
<dd>
Am I an engineer?  I majored in computer science.  In some places,
it is actually illegal for me to use a title that includes the works
<i>engineer</i> or <i>engineering</i>.  And when I was in college,
there was some competition between the computer science department and
the engineering school, so I don't even <i>want</i> to be called an
engineer.  :-)
</dd>
<dt>
software architect
</dt>
<dd>
A lot of people say this is just title inflation.  Maybe it is a
little pretentious.
</dd>
<dt>
computer scientist
</dt>
<dd>
I did major in computer science.  But to most people, computer
scientists belong in academia and are disconnected from reality.
</dd>
</dl>
	
<p>
Robert Grady, in
<a target="_blank" href="http://www.amazon.com/exec/obidos/tg/detail/-/0137203845/qid=1063431134/sr=1-1/ref=sr_1_1/102-2068667-3875341?v=glance&amp;s=books">Practical Software Metrics for Project Management and Process Improvement</a>, 
says engineers are after solutions, whereas scientists are after knowledge.  I
tried to looked into it a little further and now there is a debate going on
regarding the nature of programming.  Is is an art?  A craft?  A science?
Engineering?  Here's my take on the subject:
</p>

<table cellpadding="2">
    <tr>
	<th>endeavour</th>
	<th></th>
	<th>... what they're after</th>
    </tr>
    <tr>
	<td>art</td>
	<td><code>--&gt;</code></td>
	<td>beauty, esthetics</td>
    </tr>
    <tr>
	<td>craft</td>
	<td><code>--&gt;</code></td>
	<td>well built</td>
    </tr>
    <tr>
	<td>engineering</td>
	<td><code>--&gt;</code></td>
	<td>pratical solution</td>
    </tr>
    <tr>
	<td>science</td>
	<td><code>--&gt;</code></td>
	<td>knowledge</td>
    </tr>
</table>

<p>
Based on that, I think I'm a computer scientist, but not I am not formal
enough to belong in academia.  And I need to share my what I know a little
more.
</p>

<p>
I visited Martin Fowler's website and read his latest articles on
architecture and architects.  He has some good insights into what one should
look for in an <i>software architect</i>.  I would like to think it fitted
me.
</p>

<p>
Also found <a target="_blank" href="http://www.johnlevyconsulting.com/">John Levy</a>'s
website and read some of his thoughts on process.  He's obviously given the
topic a lot of thought.  It is nice to see someone with his vast experience
who believes in eXtreme Programming.  I always have the impression that
high level managers from large firms are more of waterfall type.
</p>
        </content>
    </entry>

    <entry>
        <title>September 11, 2003</title>
        <id>http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-09-11</id>
        <link href="http://jeantessier.com/SoftwareEngineering/Journal.cgi#2003-09-11"/>
        <published>2003-09-11</published>
        <content type="xhtml">
<p>
I went to Alan Shalloway's talk on "Transitioning to Agile".  It was in a
small room in a community center in Palo Alto.  The walls had kids' artwork.
It was very simple settings, which I didn't mind at all.  It brought a very
human dimension to the event.  Alan apologized profusely about the facilities.
Granted they did not scream "professional", but I liked them nonetheless.  The
talk was instructive, even though I already knew most of the material from
reading Alistair Cockburn's <i>Agile Software Development</i>.  It dwelt more
on what agile <i>is</i> than really transitioning, but that was OK given it
was a free seminar.
</p>

<p>
I started to read Alan's book, <i>Design Patterns Explained</i>, on the
train before going to the seminar.  He described the epiphany he had while
learning about design patterns, that you should try to encapsulate the part
that changes.  This is what I learned when I read Wolfgang Pree's book on
meta-patterns.  Alan mentioned at the seminar that he thought <i>Design Patterns</i>
by the Gang of Four had been hard to read.  Pree's book is much
harder still; it reads more like the guy's Ph.D. thesis.  But the core material
about hooks and hot spots in frameworks is so important that I think everyone
should read it to really understand the essence of building flexible software.
But it is not easily accessible to everyone, I must concede.
</p>
        </content>
    </entry>

</feed>
